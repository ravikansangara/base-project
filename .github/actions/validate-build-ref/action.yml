#---------------------------------------------------
# Composite action (Validate Git reference for build)
#---------------------------------------------------

name: Validate Git Reference for Release Type
description: Validates the git branch/tag reference for different release types

inputs:
  release:
    required: true
    description: "The type of release (feature, alpha, beta, rc, production)"
    default: "feature"
  branch_tag:
    required: false
    description: "The branch/tag name to validate against the release type"
    default: ""

runs:
  using: "composite"
  steps:
  
    - name: Validate Git Ref for Build
      shell: python
      env:
        RELEASE_TYPE: ${{ inputs.release }}
        BRANCH_TAG: ${{ inputs.branch_tag }}
        GITHUB_REF: ${{ github.ref }}
      run: |
        import re
        import sys
        import os

        # Get release type from input
        release_type = os.environ["RELEASE_TYPE"]

        # Prefer branch input if provided, else use github.ref
        branch_tag = os.environ["BRANCH_TAG"]
        github_ref = os.environ["GITHUB_REF"]
        git_ref = branch_tag if branch_tag else github_ref

        print(f"[INFO] Validating reference '{git_ref}' for release type '{release_type}'")

        # For feature build: validate 'feature/*' branches
        if release_type == "feature":
            if not re.match(r"^refs/heads/feature/.*$", git_ref):
                print("[ERROR] Invalid branch for feature build: Only branches under 'feature/*' are allowed.")
                sys.exit(1)

        # For alpha build: validate 'develop' branch
        elif release_type == "alpha":
            if git_ref != "refs/heads/develop":
                print("[ERROR] Invalid branch for alpha build: Alpha builds are only allowed from the 'develop' branch.")
                sys.exit(1)

        # For beta build: validate 'vX.Y.Z-beta.N' tag format
        elif release_type == "beta":
            if not re.match(r"^refs/tags/v\d+\.\d+\.\d+-beta\.\d+$", git_ref):
                print("[ERROR] Invalid tag format for beta build: Tags should follow the format vX.Y.Z-beta.N (e.g., v1.2.3-beta.1).")
                sys.exit(1)

        # For RC build: validate 'vX.Y.Z-rc.N' tag format
        elif release_type == "rc":
            if not re.match(r"^refs/tags/v\d+\.\d+\.\d+-rc\.\d+$", git_ref):
                print("[ERROR] Invalid tag format for RC build: Tags should follow the format vX.Y.Z-rc.N (e.g., v1.2.3-rc.1).")
                sys.exit(1)

        # For production build: validate 'vX.Y.Z' tag format
        elif release_type == "production":
            if not re.match(r"^refs/tags/v\d+\.\d+\.\d+$", git_ref):
                print("[ERROR] Invalid tag format for production build: Tags should follow the format vX.Y.Z (e.g., v1.2.3).")
                sys.exit(1)

        else:
            print(f"[ERROR] Unknown release type '{release_type}'. Please check the input.")
            sys.exit(1)

        print(f"[INFO] Validation successful!")
