#---------------------------------------------------
# Composite action (Send Email Notification)
#---------------------------------------------------

name: Workflow Email Notification
description: Composite action to send email notification for workflow status

inputs:
  username:
    required: true
    description: "SMTP username (email address)"

  password:
    required: true
    description: "SMTP password (app-specific or token)"

  to:
    required: true
    description: "Comma-separated recipient email addresses"

  workflow_success:
    required: true
    description: "Work flow status ('true' or 'false')"

  whats_new:
    required: false
    description: "JSON array of what's new entries"

  bug_fixes:
    required: false
    description: "JSON array of bug fixes entries"

  artifacts:
    required: false
    description: "JSON array of artifacts with 'label' and 'url'"

runs:
  using: "composite"

  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install jinja2 package
      shell: bash
      run: |
        python -m pip install --quiet jinja2

    - name: Generate email subject
      id: email_subject
      shell: python
      env:
        WORKFLOW_SUCCESS: ${{ inputs.workflow_success }}
        WORKFLOW_NAME: ${{ github.workflow }}
        RUN_NUMBER: ${{ github.run_number }}
        REPOSITORY: ${{ github.repository }}
      run: |
        import os

        workflow_success = os.environ.get("WORKFLOW_SUCCESS", "").lower() == "true"
        workflow_name = os.environ.get("WORKFLOW_NAME", "")
        run_number = os.environ.get("RUN_NUMBER", "")
        repo = os.environ.get("REPOSITORY", "")

        if workflow_success:
            email_subject = f"üå§ [Workflow] {workflow_name} #{run_number} of [{repo}] completed successfully!"
        else:
            email_subject = f"üå¶Ô∏è [Workflow] {workflow_name} #{run_number} of [{repo}] failed to complete!"

        with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as f:
          f.write(f"subject={email_subject}\n")

    - name: Generate email body
      id: email_body
      shell: python
      env:
        REPOSITORY: ${{ github.repository }}
        WORKFLOW_NAME: ${{ github.workflow }}
        BRANCH_TAG: ${{ github.ref_name }}
        COMMIT_SHA: ${{ github.sha }}
        TRIGGERED_BY: ${{ github.actor }}
        RUN_NUMBER: ${{ github.run_number }}
        RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}     
        WORKFLOW_SUCCESS: ${{ inputs.workflow_success }}
        WHATS_NEW: ${{ inputs.whats_new }}
        BUG_FIXES: ${{ inputs.bug_fixes }}
        ARTIFACTS: ${{ inputs.artifacts }}
      run: |
        import os
        import subprocess

        run_id = os.environ.get("RUN_NUMBER", "unknown")
        email_body_file = f"email-body-{run_id}.html"

        subprocess.run([
          "python", 
          ".github/actions/workflow-email-notification/generate-email-template.py",
          "--template", ".github/actions/workflow-email-notification/workflow-email-template.j2",
          "--output", email_body_file
        ], check=True)

        with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as f:
            f.write(f"html_body={email_body_file}\n")

    - name: Send email
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
        from: ${{ inputs.username }}
        to: ${{ inputs.to }}
        subject: ${{ steps.email_subject.outputs.subject }}
        html_body: file://${{ steps.email_body.outputs.html_body }}

