name: Workflow Template - Feature Build

on:
  workflow_dispatch:            # Allows manual triggering
  schedule:                     # At 00:00 UTC every day
    - cron: '0 0 * * *'

env:
  ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_URL }}
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  WORKFLOW_ACCESS_TOKEN: ${{ secrets.WORKFLOW_ACCESS_TOKEN }}
  ARTIFACTORY_LINUX_RUNNER_SETUP: ${{ vars.ARTIFACTORY_LINUX_RUNNER_SETUP }}
  ORGANIZATION_RUNNER_LABEL: ${{ secrets.ORGANIZATION_RUNNER_LABEL }}
  DOCKER_IMAGE: ${{ vars.DOCKER_REGISTRY }}/gh-runner-nvrx-app:1.0.0
  
jobs:
  #--------------------------------------------------------
  # Starts container and registers repo-level runner
  #--------------------------------------------------------
  setup_runner:
    runs-on: ${{ fromJSON(env.ORGANIZATION_RUNNER_LABEL) }}
    outputs:
      label: ${{ steps.generate_runner_label.outputs.label }}
      runs_on: ${{ steps.generate_runner_label.outputs.runs_on }}
    steps:
      # Generate unique name/label for new runner
      - name: Generate unique runner label
        id: generate_runner_label
        run: |
          REPO_NAME=$(basename ${GITHUB_REPOSITORY})
          RUNNER_LABEL="docker-${REPO_NAME}-${GITHUB_RUN_NUMBER}"
          RUNS_ON="[\"self-hosted\", \"docker-${REPO_NAME}-${GITHUB_RUN_NUMBER}\"]"
          echo "Runner label: ${RUNNER_LABEL}"
          
          echo "label=${RUNNER_LABEL}" >> $GITHUB_OUTPUT
          echo "runs_on=${RUNS_ON}" >> $GITHUB_OUTPUT

      # Start docker container
      - name: Start Docker runner
        run: |
          docker run -d --rm \
            --name ${{ steps.generate_runner_label.outputs.label }} \
            -e ENABLE_GITHUB_RUNNER="true" \
            -e ARTIFACTORY_URL="${{ env.ARTIFACTORY_URL }}" \
            -e ARTIFACTORY_USERNAME="${{ env.ARTIFACTORY_USERNAME }}" \
            -e ARTIFACTORY_PASSWORD="${{ env.ARTIFACTORY_PASSWORD }}" \
            -e JFROG_ACTION_RUNNER_SETUP_PATH="${{ env.ARTIFACTORY_LINUX_RUNNER_SETUP }}" \
            -e GITHUB_REPO_NAME="${GITHUB_REPOSITORY}" \
            -e GITHUB_ACCESS_TOKEN="${{ env.WORKFLOW_ACCESS_TOKEN }}" \
            -e GITHUB_ACTION_RUNNER_NAME="${{ steps.generate_runner_label.outputs.label }}" \
            -e GITHUB_ACTION_RUNNER_LABELS="${{ steps.generate_runner_label.outputs.label }}" \
            -e GITHUB_FORCE_REMOVE_RUNNER="true" \
            ${{ env.DOCKER_IMAGE_NAME }}

          # Check the running container
          docker ps --format "table {{ .ID }}\t{{ .Image }}\t{{ .Names }}\t{{ .Status }}"

          echo "Start container and register runner"

      # Wait for a short period to allow runner registration
      - name: Wait for runner to register to repository
        run: sleep 15

      # Display the container logs
      - name: Print Docker container logs
        run: |
          docker logs ${{ steps.generate_runner_label.outputs.label }}

  #--------------------------------------------------------
  # Runs the actual build on the dynamic runner
  #--------------------------------------------------------
  build_project:
    needs: [setup_runner]
    runs-on: ${{ fromJSON(needs.setup_runner.outputs.runs_on) }}
    steps:
    - name: Checkout repository with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup build pre-requisites
      run: |
        echo "Setup build pre-requisites"

    - name: Build the project
      run: |
        echo "Build the project"

    - name: Upload build artifacts to artifactory
      run: |
        echo "Upload build artifacts to artifactory"

    - name: Send an email notification
      run: |
        echo "Send an email notification"

  #--------------------------------------------------------
  # Stops container and de-registers repo-level runner
  #--------------------------------------------------------
  remove_runner:
    needs: [setup_runner, project_build]
    runs-on: ${{ fromJSON(env.ORGANIZATION_RUNNER_LABEL) }}
    steps:
    - run: |
        docker container stop ${{ needs.setup_runner.outputs.label }}
        docker ps --format "table {{ .ID }}\t{{ .Image }}\t{{ .Names }}\t{{ .Status }}"
        echo "Stop container and de-register runner"