name: Dynamic Runner
on:
  workflow_dispatch:

env:
  ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_URL }}
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  ARTIFACTORY_LINUX_RUNNER_SETUP: ${{ vars.ARTIFACTORY_LINUX_RUNNER_SETUP }}
  DOCKER_IMAGE_NAME: github-runner:1.0

jobs:
  # Starts container and registers repo-level runner
  setup_runner:
    runs-on: [self-hosted, org-runner]
    outputs:
      label: ${{ steps.generate_runner_label.outputs.label }}
      runs_on: ${{ steps.generate_runner_label.outputs.runs_on }}
    steps:
      - name: Generate unique runner label
        id: generate_runner_label
        run: |
          REPO_NAME=$(basename ${GITHUB_REPOSITORY})
          RUNNER_LABEL="docker-linux-${REPO_NAME}-${GITHUB_RUN_NUMBER}"
          RUNS_ON="[\"self-hosted\", \"docker-linux-${REPO_NAME}-${GITHUB_RUN_NUMBER}\"]"
          echo "Runner label: ${RUNNER_LABEL}"
          
          echo "label=${RUNNER_LABEL}" >> $GITHUB_OUTPUT
          echo "runs_on=${RUNS_ON}" >> $GITHUB_OUTPUT

      - name: Start Docker runner
        run: |
          docker run -d --rm \
            --name ${{ steps.generate_runner_label.outputs.label }} \
            -e ENABLE_GITHUB_RUNNER="true" \
            -e ARTIFACTORY_URL="${{ env.ARTIFACTORY_URL }}" \
            -e ARTIFACTORY_USERNAME="${{ env.ARTIFACTORY_USERNAME }}" \
            -e ARTIFACTORY_PASSWORD="${{ env.ARTIFACTORY_PASSWORD }}" \
            -e JFROG_ACTION_RUNNER_SETUP_PATH="${{ env.ARTIFACTORY_LINUX_RUNNER_SETUP }}" \
            -e GITHUB_REPO_NAME="${GITHUB_REPOSITORY}" \
            -e GITHUB_ACCESS_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            -e GITHUB_ACTION_RUNNER_NAME="${{ steps.generate_runner_label.outputs.label }}" \
            -e GITHUB_ACTION_RUNNER_LABELS="${{ steps.generate_runner_label.outputs.label }}"" \
            -e GITHUB_FORCE_REMOVE_RUNNER="true" \
            ${{ env.DOCKER_IMAGE_NAME }}

          echo "Start container and register runner"
          
          sleep 2
          
          docker ps --format "table {{ .ID }}\t{{ .Image }}\t{{ .Names }}\t{{ .Status }}"

  # Runs the actual build on the dynamic runner
  project_build:
    needs: [setup_runner]
    runs-on: ${{ fromJSON(needs.setup_runner.outputs.runs_on) }}
    steps:
    - run: echo "My runner is ${{ needs.setup_runner.outputs.runs_on }}"

  # Stops container and de-registers repo-level runner
  remove_runner:
    needs: [setup_runner, project_build]
    runs-on: [self-hosted, org-runner]
    steps:
    - run: |
        docker container stop ${{ needs.setup_runner.outputs.label }}
        echo "Stop container and de-register runner"

