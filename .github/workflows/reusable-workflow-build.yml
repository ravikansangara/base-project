name: Reusable Workflow Template - Build Linux Project

on:
  workflow_call:

    inputs:
      release_type:
        required: true
        type: string
      build_iteration:
        required: true
        type: string
      build_ref:
        required: true
        type: string
      artifact_upload_repo_name:
        required: true
        type: string
      git_ref:
        required: true
        type: string
        
    secrets:
      artifactory_username:
        required: true
      artifactory_password:
        required: true
      workflow_ci_token:
        required: true

env:

  # Variables passed from the workflow_call inputs
  GIT_REF: ${{ inputs.git_ref }}
  BUILD_REF_TYPE: ${{ inputs.build_ref_type }}
  BUILD_REF_NAME: ${{ inputs.build_ref_name }}
  RELEASE_TYPE: ${{ inputs.release_type }}
  ARTIFACT_UPLOAD_REPO_NAME: ${{ inputs.artifact_upload_repo_name }}

  # Secrets passed from the workflow_call inputs
  WORKFLOW_CI_TOKEN: ${{ secrets.workflow_ci_token }}
  ARTIFACTORY_USERNAME: ${{ secrets.artifactory_username }}
  ARTIFACTORY_PASSWORD: ${{ secrets.artifactory_password }}

  # Organization-level variables directly referenced
  ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_URL }}
  DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
  ARTIFACTORY_LINUX_RUNNER_SETUP: ${{ vars.ARTIFACTORY_LINUX_RUNNER_SETUP }}
  ORGANIZATION_RUNNER_LABEL: ${{ vars.ORGANIZATION_RUNNER_LABEL }}

  # Workflow local variables
  DOCKER_IMAGE: my-image:1.0.0
  ARTIFACTS_UPLOAD_JSON: build/artifacts_upload.json
  ARTIFACTS_EMAIL_JSON: build/artifacts_email.json

jobs:

  # ───────────────────────────────────────────
  # Starts container and registers repo-level runner
  # ───────────────────────────────────────────
  setup_runner:
    runs-on: ${{ fromJSON(env.ORGANIZATION_RUNNER_LABEL) }}

    outputs:
      label: ${{ steps.start_runner.outputs.label }}
      runs_on: ${{ steps.start_runner.outputs.runs_on }}

    steps:
    - name: Start the Docker runner
      id: start_runner
      uses: matrix-devsecops/automation-toolkit/.github/actions/setup-linux-docker-runner@main
      with:
        docker_registry: ${{ env.DOCKER_REGISTRY }}
        docker_image: ${{ env.DOCKER_IMAGE }}
        artifactory_url: ${{ env.ARTIFACTORY_URL }}
        artifactory_username: ${{ env.ARTIFACTORY_USERNAME }}
        artifactory_password: ${{ env.ARTIFACTORY_PASSWORD }}
        runner_setup_path: ${{ env.ARTIFACTORY_LINUX_RUNNER_SETUP }}
        workflow_ci_token: ${{ env.WORKFLOW_CI_TOKEN }}

  # ───────────────────────────────────────────
  # Runs the actual build on the dynamic repo runner
  # ───────────────────────────────────────────
  build_project:
    needs: [setup_runner]
    runs-on: ${{ fromJSON(needs.setup_runner.outputs.runs_on) }}
    outputs:
      artifacts_upload: ${{ steps.artifacts_info.outputs.artifacts_upload }}
      artifacts_email: ${{ steps.artifacts_info.outputs.artifacts_email }}
      changelog_whats_new: ${{ steps.changelog.outputs.whats_new }}
      changelog_bugfixes: ${{ steps.changelog.outputs.bugfixes }}

    steps:
    - name: Checkout repository with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ env.GIT_REF }}
        token: ${{ env.WORKFLOW_CI_TOKEN }}

    - name: Setup build pre-requisites
      shell: bash
      run: |
        echo "Setup/Download project pre-requisites"

    - name: Build the project
      shell: bash
      run: |
        echo "Build the project"

    - name: Prepare artifacts information
      id: artifacts_info
      shell: bash
      run: |

        # Derive the list of artifacts
        
        # ARTIFACTS_UPLOAD_JSON=[{"local_path": "", "remote_path": ""}, ...]
        # echo "artifacts_upload=${ARTIFACTS_UPLOAD_JSON}" >> "$GITHUB_OUTPUT"
        # ARTIFACTS_EMAIL_JSON=[{"label": "", "url": ""}, ...]
        # echo "artifacts_email=${ARTIFACTS_EMAIL_JSON}" >> "$GITHUB_OUTPUT"

        # OR

        # Read json file prepared from build step

        # echo "artifacts_upload=$(jq -c '.' "$ARTIFACTS_UPLOAD_JSON")" >> "$GITHUB_OUTPUT"
        # echo "artifacts_email=$(jq -c '.' "$ARTIFACTS_EMAIL_JSON")" >> "$GITHUB_OUTPUT"

    - name: Prepare changelog
      id: changelog
      shell: bash
      run: |

        # Derive the changelog as json array
        # WHATS_NEW=["feature-1", "feature-2", ...]
        # BUGFIXES=["bugfix-1", "bugfix-2", ...]

        # Output variable to use in email_notification job
        echo "whats_new=${WHATS_NEW}" >> "$GITHUB_OUTPUT"
        echo "bugfixes=${BUGFIXES}" >> "$GITHUB_OUTPUT"

  # ───────────────────────────────────────────
  # Upload Email Artifacts
  # ───────────────────────────────────────────
  upload_artifacts:
    needs: [setup_runner, build_project]
    runs-on: ${{ fromJSON(needs.setup_runner.outputs.runs_on) }}

    steps:
    - name: Upload artifacts to artifactory
      uses: matrix-devsecops/automation-toolkit/.github/actions/jfrog-artifactory-upload@main
      with:
        artifactory_url: ${{ env.ARTIFACTORY_URL }}
        artifactory_username: ${{ env.ARTIFACTORY_USERNAME }}
        artifactory_password: ${{ env.ARTIFACTORY_PASSWORD }}
        artifacts: ${{ needs.build_project.outputs.artifacts_upload }}

  # ───────────────────────────────────────────
  # Send Email Notification
  # ───────────────────────────────────────────
  email_notification:
    if: ${{ needs.setup_runner.result == 'success' }}
    needs: [setup_runner, build_project, upload_artifacts]
    runs-on: ${{ fromJSON(needs.setup_runner.outputs.runs_on) }}

    steps:
    - name: Send an email notification
      uses: matrix-devsecops/automation-toolkit/.github/actions/workflow-email-notification@main
      with:
        to: to-project-group@matrixcomsec.com
        workflow_success: ${{ needs.build_project.result == 'success' && needs.upload_artifacts.result == 'success' }}
        whats_new: ${{ needs.build_project.outputs.whats_new }}
        bugfixes: ${{ needs.build_project.outputs.bugfixes }}
        artifacts: ${{ needs.build_project.outputs.artifacts_email }}

  # ───────────────────────────────────────────
  # Stops container and de-registers repo-level runner
  # ───────────────────────────────────────────
  remove_runner:
    if: always()
    needs: [setup_runner, build_project, upload_artifacts, email_notification]
    runs-on: ${{ fromJSON(env.ORGANIZATION_RUNNER_LABEL) }}

    steps:
      - name: Stop the Docker runner
        uses: matrix-devsecops/automation-toolkit/.github/actions/remove-linux-docker-runner@main
        with:
          label: ${{ needs.setup_runner.outputs.label }}